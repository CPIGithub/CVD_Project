df_sumstat()
})
# For Cross-tab
output$freq_table = renderTable({
tabyl(df,
.data[[input$outcome1]])
})
output$crosstab_table = renderTable({
tabyl(df,
.data[[input$outcome2]],
.data[[input$outcome3]])
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- dashboardPage(
dashboardHeader(title = "CVD Screening Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Progress Monitoring", tabName = "progress", icon = icon("dashboard")),
menuItem("Duplicate Check", tabName = "duplicate", icon = icon("table")),
menuItem("Summary Statistic", tabName = "sumstat", icon = icon("table")),
menuItem("Cross-tab", tabName = "crosstab", icon = icon("table"))
)
),
dashboardBody(
tabItems(
# first tab content
tabItem(tabName = "progress",
fluidRow(
column(width = 4,
align = "left",
selectInput("group", "select the grouping variable",
choices = grouplist))
),
fluidRow(
box(tableOutput("progress_table"))
)
),
# 2nd tab content
tabItem(tabName = "duplicate",
fluidPage(
titlePanel("Duplicate Observation Checker"),
sidebarLayout(
sidebarPanel(
selectInput("dupvar", "Select Input Variables",
choices = dup_var_list,
multiple = TRUE),
downloadButton("downloadData", "Download Data")
),
mainPanel(
tableOutput("duplicate_table")
)
)
)
),
# 3rd tab content
tabItem(tabName = "sumstat",
fluidPage(
titlePanel("Sum-stat for continious variable"),
sidebarLayout(
sidebarPanel(
selectInput("contvar", "Select Input Variables",
choices = cont_var,
multiple = TRUE)
),
mainPanel(
dataTableOutput("sumstat_table")
)
)
)
),
# 4th tab content
tabItem(tabName = "crosstab",
fluidRow(
column(width = 4,
align = "left",
selectInput("outcome1", "select the interested variable",
choices = varlist))
),
fluidRow(
box(tableOutput("freq_table"))
),
fluidRow(
column(width = 4,
align = "left",
selectInput("outcome2", "select the first interested variable",
choices = varlist)),
column(width = 4,
align = "left",
selectInput("outcome3", "select the second interested variable",
choices = varlist)
),
fluidRow(
box(tableOutput("crosstab_table"))
)
)
)
)
)
)
server <- function(input, output) {
# For progress monitoring
output$progress_table = renderTable({
df %>%
group_by(.data[[input$group]]) %>%
summarize(svy_complete = sum(svy_complete),
confirm_visit = sum(ck_cal_confirm_visit),
svy_early = sum(svy_early),
svy_late = sum(svy_late),
svy_duration_mean = mean(svy_duration)) %>%
ungroup() %>%
mutate(confirm_share = confirm_visit / svy_complete * 100) %>%
select(input$group, svy_complete, confirm_share, confirm_visit,
svy_early, svy_late, svy_duration_mean) %>%
rename(
"Total Survey Completed"                = "svy_complete",
"Eligable for Confirmation Visit"       = "confirm_visit",
"% of Patient for Confirmation Visit"   = "confirm_share",
"Number of survey started before 7 AM"  = "svy_early",
"Number of survey started after 6 PM"   = "svy_late",
"Average Survey Duration"               = "svy_duration_mean"
) %>%
as.data.frame()  # Convert to data frame
})
# For Duplicate Check
duplicates <- reactive({
if (!is.null(input$dupvar) && length(input$dupvar) > 0) {
selected_vars <- all_of(input$dupvar)
data_subset <- df_dup[, selected_vars, drop = FALSE]
return(df_dup[duplicated(data_subset), ])
} else {
return(NULL)
}
})
output$duplicate_table <- renderDataTable({
duplicates()
})
# Function to download the duplicate data as a CSV file
output$downloadData <- downloadHandler(
filename = function() {
paste("duplicates.csv")
},
content = function(file) {
write.csv(duplicates(), file)
}
)
# For Summary Statistics
df_sumstat <- reactive({
if (!is.null(input$contvar) && length(input$contvar) > 0) {
selected_contvars <- all_of(input$contvar)
summary_df <- df %>%
select(selected_contvars) %>%
summary() %>%
as.data.frame() %>%
tidyr::separate(Freq, c("Stat", "Value"), sep = ":") %>%
tidyr::pivot_wider(names_from = Stat, values_from = Value)
return(summary_df)
} else {
return(NULL)
}
})
output$sumstat_table <- renderTable({
df_sumstat()
})
# For Cross-tab
output$freq_table = renderTable({
tabyl(df,
.data[[input$outcome1]])
})
output$crosstab_table = renderTable({
tabyl(df,
.data[[input$outcome2]],
.data[[input$outcome3]])
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- dashboardPage(
dashboardHeader(title = "CVD Screening Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Progress Monitoring", tabName = "progress", icon = icon("dashboard")),
menuItem("Duplicate Check", tabName = "duplicate", icon = icon("table")),
menuItem("Summary Statistic", tabName = "sumstat", icon = icon("table")),
menuItem("Cross-tab", tabName = "crosstab", icon = icon("table"))
)
),
dashboardBody(
tabItems(
# first tab content
tabItem(tabName = "progress",
fluidRow(
column(width = 4,
align = "left",
selectInput("group", "select the grouping variable",
choices = grouplist))
),
fluidRow(
box(tableOutput("progress_table"))
)
),
# 2nd tab content
tabItem(tabName = "duplicate",
fluidPage(
titlePanel("Duplicate Observation Checker"),
sidebarLayout(
sidebarPanel(
selectInput("dupvar", "Select Input Variables",
choices = dup_var_list,
multiple = TRUE),
downloadButton("downloadData", "Download Data")
),
mainPanel(
tableOutput("duplicate_table")
)
)
)
),
# 3rd tab content
tabItem(tabName = "sumstat",
fluidPage(
titlePanel("Sum-stat for continious variable"),
sidebarLayout(
sidebarPanel(
selectInput("contvar", "Select Input Variables",
choices = cont_var,
multiple = TRUE)
),
mainPanel(
dataTableOutput("sumstat_table")
)
)
)
),
# 4th tab content
tabItem(tabName = "crosstab",
fluidRow(
column(width = 4,
align = "left",
selectInput("outcome1", "select the interested variable",
choices = varlist))
),
fluidRow(
box(tableOutput("freq_table"))
),
fluidRow(
column(width = 4,
align = "left",
selectInput("outcome2", "select the first interested variable",
choices = varlist)),
column(width = 4,
align = "left",
selectInput("outcome3", "select the second interested variable",
choices = varlist)
),
fluidRow(
box(tableOutput("crosstab_table"))
)
)
)
)
)
)
server <- function(input, output) {
# For progress monitoring
output$progress_table = renderTable({
df %>%
group_by(.data[[input$group]]) %>%
summarize(svy_complete = sum(svy_complete),
confirm_visit = sum(ck_cal_confirm_visit),
svy_early = sum(svy_early),
svy_late = sum(svy_late),
svy_duration_mean = mean(svy_duration)) %>%
ungroup() %>%
mutate(confirm_share = confirm_visit / svy_complete * 100) %>%
select(input$group, svy_complete, confirm_share, confirm_visit,
svy_early, svy_late, svy_duration_mean) %>%
rename(
"Total Survey Completed"                = "svy_complete",
"Eligable for Confirmation Visit"       = "confirm_visit",
"% of Patient for Confirmation Visit"   = "confirm_share",
"Number of survey started before 7 AM"  = "svy_early",
"Number of survey started after 6 PM"   = "svy_late",
"Average Survey Duration"               = "svy_duration_mean"
) %>%
as.data.frame()  # Convert to data frame
})
# For Duplicate Check
duplicates <- reactive({
if (!is.null(input$dupvar) && length(input$dupvar) > 0) {
selected_vars <- all_of(input$dupvar)
data_subset <- df_dup[, selected_vars, drop = FALSE]
return(df_dup[duplicated(data_subset), ])
} else {
return(NULL)
}
})
output$duplicate_table <- renderDataTable({
duplicates()
})
# Function to download the duplicate data as a CSV file
output$downloadData <- downloadHandler(
filename = function() {
paste("duplicates.csv")
},
content = function(file) {
write.csv(duplicates(), file)
}
)
# For Summary Statistics
df_sumstat <- reactive({
if (!is.null(input$contvar) && length(input$contvar) > 0) {
selected_contvars <- all_of(input$contvar)
summary_df <- df %>%
select(selected_contvars) %>%
summary() %>%
as.data.frame() %>%
tidyr::separate(Freq, c("Stat", "Value"), sep = ":") %>%
tidyr::pivot_wider(names_from = Stat, values_from = Value)
return(summary_df)
} else {
return(NULL)
}
})
output$sumstat_table <- renderDataTable({
df_sumstat()
})
# For Cross-tab
output$freq_table = renderTable({
tabyl(df,
.data[[input$outcome1]])
})
output$crosstab_table = renderTable({
tabyl(df,
.data[[input$outcome2]],
.data[[input$outcome3]])
})
}
# Run the application
shinyApp(ui = ui, server = server)
mtcars
names(mtcars)
mtcars %>% select(!mpg) %>% names()
server <- function(input, output) {
# For progress monitoring
output$progress_table = renderTable({
df %>%
group_by(.data[[input$group]]) %>%
summarize(svy_complete = sum(svy_complete),
confirm_visit = sum(ck_cal_confirm_visit),
svy_early = sum(svy_early),
svy_late = sum(svy_late),
svy_duration_mean = mean(svy_duration)) %>%
ungroup() %>%
mutate(confirm_share = confirm_visit / svy_complete * 100) %>%
select(input$group, svy_complete, confirm_share, confirm_visit,
svy_early, svy_late, svy_duration_mean) %>%
rename(
"Total Survey Completed"                = "svy_complete",
"Eligable for Confirmation Visit"       = "confirm_visit",
"% of Patient for Confirmation Visit"   = "confirm_share",
"Number of survey started before 7 AM"  = "svy_early",
"Number of survey started after 6 PM"   = "svy_late",
"Average Survey Duration"               = "svy_duration_mean"
) %>%
as.data.frame()  # Convert to data frame
})
# For Duplicate Check
duplicates <- reactive({
if (!is.null(input$dupvar) && length(input$dupvar) > 0) {
selected_vars <- all_of(input$dupvar)
data_subset <- df_dup[, selected_vars, drop = FALSE]
return(df_dup[duplicated(data_subset), ])
} else {
return(NULL)
}
})
output$duplicate_table <- renderDataTable({
duplicates()
})
# Function to download the duplicate data as a CSV file
output$downloadData <- downloadHandler(
filename = function() {
paste("duplicates.csv")
},
content = function(file) {
write.csv(duplicates(), file)
}
)
# For Summary Statistics
df_sumstat <- reactive({
if (!is.null(input$contvar) && length(input$contvar) > 0) {
selected_contvars <- all_of(input$contvar)
summary_df <- df %>%
select(selected_contvars) %>%
summary() %>%
as.data.frame() %>%
tidyr::separate(Freq, c("Stat", "Value"), sep = ":") %>%
tidyr::pivot_wider(names_from = Stat, values_from = Value) %>%
rename(
"Variable name" = "Var2"
) %>%
selsect(!Var1)
return(summary_df)
} else {
return(NULL)
}
})
output$sumstat_table <- renderDataTable({
df_sumstat()
})
# For Cross-tab
output$freq_table = renderTable({
tabyl(df,
.data[[input$outcome1]])
})
output$crosstab_table = renderTable({
tabyl(df,
.data[[input$outcome2]],
.data[[input$outcome3]])
})
}
# Run the application
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# For progress monitoring
output$progress_table = renderTable({
df %>%
group_by(.data[[input$group]]) %>%
summarize(svy_complete = sum(svy_complete),
confirm_visit = sum(ck_cal_confirm_visit),
svy_early = sum(svy_early),
svy_late = sum(svy_late),
svy_duration_mean = mean(svy_duration)) %>%
ungroup() %>%
mutate(confirm_share = confirm_visit / svy_complete * 100) %>%
select(input$group, svy_complete, confirm_share, confirm_visit,
svy_early, svy_late, svy_duration_mean) %>%
rename(
"Total Survey Completed"                = "svy_complete",
"Eligable for Confirmation Visit"       = "confirm_visit",
"% of Patient for Confirmation Visit"   = "confirm_share",
"Number of survey started before 7 AM"  = "svy_early",
"Number of survey started after 6 PM"   = "svy_late",
"Average Survey Duration"               = "svy_duration_mean"
) %>%
as.data.frame()  # Convert to data frame
})
# For Duplicate Check
duplicates <- reactive({
if (!is.null(input$dupvar) && length(input$dupvar) > 0) {
selected_vars <- all_of(input$dupvar)
data_subset <- df_dup[, selected_vars, drop = FALSE]
return(df_dup[duplicated(data_subset), ])
} else {
return(NULL)
}
})
output$duplicate_table <- renderDataTable({
duplicates()
})
# Function to download the duplicate data as a CSV file
output$downloadData <- downloadHandler(
filename = function() {
paste("duplicates.csv")
},
content = function(file) {
write.csv(duplicates(), file)
}
)
# For Summary Statistics
df_sumstat <- reactive({
if (!is.null(input$contvar) && length(input$contvar) > 0) {
selected_contvars <- all_of(input$contvar)
summary_df <- df %>%
select(selected_contvars) %>%
summary() %>%
as.data.frame() %>%
tidyr::separate(Freq, c("Stat", "Value"), sep = ":") %>%
tidyr::pivot_wider(names_from = Stat, values_from = Value) %>%
rename(
"Variable name" = "Var2"
) %>%
select(!Var1)
return(summary_df)
} else {
return(NULL)
}
})
output$sumstat_table <- renderDataTable({
df_sumstat()
})
# For Cross-tab
output$freq_table = renderTable({
tabyl(df,
.data[[input$outcome1]])
})
output$crosstab_table = renderTable({
tabyl(df,
.data[[input$outcome2]],
.data[[input$outcome3]])
})
}
# Run the application
shinyApp(ui = ui, server = server)
# input data
com_screening <- here::here("05_CVD_Screening_Dashboard", "community_screening.csv")
plot(com_screening$duration)
names(com_screening)
df <- read.csv(com_screening)
plot(df$duration)

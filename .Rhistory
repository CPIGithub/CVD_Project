})
# For Cross-tab
output$freq_table = renderTable({
tabyl(df,
.data[[input$outcome1]])
})
output$crosstab_table = renderTable({
tabyl(df,
.data[[input$outcome2]],
.data[[input$outcome3]])
})
}
# Run the application
shinyApp(ui = ui, server = server)
# input data
com_screening <- here::here("05_CVD_Screening_Dashboard", "community_screening.csv")
plot(com_screening$duration)
names(com_screening)
df <- read.csv(com_screening)
plot(df$duration)
options(scipen    = 999)
options(max.print = 5000)
options(tibble.width = Inf)
if(!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse, lubridate, janitor
)
filter    <- dplyr::filter
select    <- dplyr::select
summarize <- dplyr::summarize
# here::here()
here::i_am("cvd_project.Rproj")
# input data
com_screening <- here::here("05_CVD_Screening_Dashboard", "community_screening.csv")
df <- read.csv(com_screening)
names(df)
df %>%
filter(svy_duration  < 300 & ck_cal_eligible == 1) %>%
ggplot(aes(survey_duration)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black")
df %>%
filter(svy_duration  < 300 & ck_cal_eligible == 1) %>%
ggplot(aes(svy_duration)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black")
df %>%
filter(svy_duration  < 300 & ck_cal_eligible == 1) %>%
ggplot(aes(svy_duration)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
geom_vline(xintercept = mean(svy_duration), color = "red", linetype = "dashed")
# duration plot
mean_val <- mean(df[svy_duration  < 300 & ck_cal_eligible == 1,])
# duration plot
mean_val <- mean(df[df$svy_duration  < 300 & df$ck_cal_eligible == 1,])
# duration plot
mean_val <- mean(df[df$svy_duration  < 300 & df$ck_cal_eligible == 1,], na.rm = TRUE)
x <- df[df$svy_duration  < 300 & df$ck_cal_eligible == 1,]
# duration plot
mean_val <- mean(df[df$svy_duration  < 300 & df$ck_cal_eligible == 1, df$svy_duration], na.rm = TRUE)
x <- df[df$svy_duration  < 300 & df$ck_cal_eligible == 1, svy_duration]
x <- df[df$svy_duration  < 300 & df$ck_cal_eligible == 1, df$svy_duration]
x <- df$svy_duration[df$svy_duration  < 300 & df$ck_cal_eligible == 1]
df <- read.csv(com_screening)
# duration plot
svy_duration <- df$svy_duration[df$svy_duration  < 300 & df$ck_cal_eligible == 1]
mean_val <- mean(svy_duration, na.rm = TRUE)
median_val <- median(svy_duration, na.rm = TRUE)
q1_val <- quantile(svy_duration, probs = 0.25, na.rm = TRUE)
q3_val <- quantile(svy_duration, probs = 0.75, na.rm = TRUE)
df %>%
filter(svy_duration  < 300 & ck_cal_eligible == 1) %>%
ggplot(aes(svy_duration)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
geom_vline(xintercept = mean_val, color = "red", linetype = "dashed") +
geom_vline(xintercept = median_val, color = "green", linetype = "dashed") +
geom_vline(xintercept = q1_val, color = "blue", linetype = "dashed") +
geom_vline(xintercept = q3_val, color = "purple", linetype = "dashed") +
geom_text(data = summary_data, aes(x = Value, y = 5, label = paste(Label, ": ", round(Value, 2))), hjust = 0) +
labs(title = "Survey Duration Distribution",
x = "Duration (minutes)",
y = "Frequency") +
theme_minimal()
df %>%
filter(svy_duration  < 300 & ck_cal_eligible == 1) %>%
ggplot(aes(svy_duration)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
geom_vline(xintercept = mean_val, color = "red", linetype = "dashed") +
geom_vline(xintercept = median_val, color = "green", linetype = "dashed") +
geom_vline(xintercept = q1_val, color = "blue", linetype = "dashed") +
geom_vline(xintercept = q3_val, color = "purple", linetype = "dashed") +
geom_text(aes(x = svy_duration, y = 10, label = paste(Label, ": ", round(svy_duration, 2))), hjust = 0) +
labs(title = "Survey Duration Distribution",
x = "Duration (minutes)",
y = "Frequency") +
theme_minimal()
df %>%
filter(svy_duration  < 300 & ck_cal_eligible == 1) %>%
ggplot(aes(svy_duration)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
geom_vline(xintercept = mean_val, color = "red", linetype = "dashed") +
geom_vline(xintercept = median_val, color = "green", linetype = "dashed") +
geom_vline(xintercept = q1_val, color = "blue", linetype = "dashed") +
geom_vline(xintercept = q3_val, color = "purple", linetype = "dashed") +
geom_text(aes(x = svy_duration, y = 10, label = paste("Label", ": ", round(svy_duration, 2))), hjust = 0) +
labs(title = "Survey Duration Distribution",
x = "Duration (minutes)",
y = "Frequency") +
theme_minimal()
df %>%
filter(svy_duration  < 300 & ck_cal_eligible == 1) %>%
ggplot(aes(svy_duration)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
geom_vline(xintercept = mean_val, color = "red", linetype = "dashed") +
geom_vline(xintercept = median_val, color = "green", linetype = "dashed") +
geom_vline(xintercept = q1_val, color = "blue", linetype = "dashed") +
geom_vline(xintercept = q3_val, color = "purple", linetype = "dashed") +
geom_text(aes(x = svy_duration, y = 5), hjust = 0) +
labs(title = "Survey Duration Distribution",
x = "Duration (minutes)",
y = "Frequency") +
theme_minimal()
df %>%
filter(svy_duration  < 300 & ck_cal_eligible == 1) %>%
ggplot(aes(svy_duration)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
geom_vline(xintercept = mean_val, color = "red", linetype = "dashed") +
geom_vline(xintercept = median_val, color = "green", linetype = "dashed") +
geom_vline(xintercept = q1_val, color = "blue", linetype = "dashed") +
geom_vline(xintercept = q3_val, color = "purple", linetype = "dashed") +
labs(title = "Survey Duration Distribution",
x = "Duration (minutes)",
y = "Frequency") +
theme_minimal()
df %>%
filter(svy_duration  < 300 & ck_cal_eligible == 1) %>%
ggplot(aes(svy_duration)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
geom_vline(xintercept = mean_val, color = "red", linetype = "dashed") +
geom_vline(xintercept = median_val, color = "green", linetype = "dashed") +
geom_vline(xintercept = q1_val, color = "blue", linetype = "dashed") +
geom_vline(xintercept = q3_val, color = "purple", linetype = "dashed") +
labs(title = "Survey Duration Distribution",
x = "Duration (minutes)",
y = "Frequency") +
theme_minimal() +
annotate("text", x = mean_val, y = 10, label = paste("Mean =", round(mean_val, 2)), vjust = -1, size = 4, color = "blue") +
annotate("text", x = median_val, y = 15, label = paste("Median =", round(median_val, 2)), vjust = -1, size = 4, color = "red") +
annotate("text", x = q1_val, y = 20, label = paste("Q1 =", round(q1_val, 2)), vjust = -1, size = 4, color = "green") +
annotate("text", x = q3_val, y = 25, label = paste("Q3 =", round(q3_val, 2)), vjust = -1, size = 4, color = "purple")
df %>%
filter(svy_duration  < 300 & ck_cal_eligible == 1) %>%
ggplot(aes(svy_duration)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
geom_vline(xintercept = mean_val, color = "red", linetype = "dashed") +
geom_vline(xintercept = median_val, color = "green", linetype = "dashed") +
geom_vline(xintercept = q1_val, color = "blue", linetype = "dashed") +
geom_vline(xintercept = q3_val, color = "purple", linetype = "dashed") +
labs(title = "Survey Duration Distribution",
x = "Duration (minutes)",
y = "Frequency") +
theme_minimal() +
annotate("text", x = mean_val, y = 10, label = paste("Mean =", round(mean_val, 2)), vjust = -1, size = 4, color = "red") +
annotate("text", x = median_val, y = 15, label = paste("Median =", round(median_val, 2)), vjust = -1, size = 4, color = "green") +
annotate("text", x = q1_val, y = 20, label = paste("Q1 =", round(q1_val, 2)), vjust = -1, size = 4, color = "blue") +
annotate("text", x = q3_val, y = 25, label = paste("Q3 =", round(q3_val, 2)), vjust = -1, size = 4, color = "purple")
# duration by case type
# Calculate summary statistics
summary_stats <- df %>%
group_by(mhist_drug_noall, no_mhistdrug_bg) %>%
summarize(
Mean = mean(svy_duration),
Q1 = quantile(svy_duration, 0.25),
Q3 = quantile(svy_duration, 0.75)
)
p <- ggplot(df, aes(x = mhist_drug_noall, y = svy_duration, fill = no_mhistdrug_bg)) +
geom_boxplot(outlier.shape = NA)
p
# duration by case type
# Calculate summary statistics
summary_stats <- df %>%
group_by(mhist_drug_noall, no_mhistdrug_bg) %>%
summarize(
Mean = mean(svy_duration),
Q1 = quantile(svy_duration, 0.25),
Q3 = quantile(svy_duration, 0.75)
)
# Create a boxplot with mean, Q1, Q3, and outliers
p <- ggplot(df, aes(x = mhist_drug_noall, y = svy_duration, fill = no_mhistdrug_bg)) +
geom_boxplot(outlier.shape = NA) +
geom_point(aes(shape = svy_duration), position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8)) +
stat_summary(fun = mean, geom = "point", shape = 4, size = 4, color = "red") +
stat_summary(fun = function(x) quantile(x, 0.25), geom = "point", shape = 1, size = 4, color = "blue") +
stat_summary(fun = function(x) quantile(x, 0.75), geom = "point", shape = 2, size = 4, color = "green") +
labs(
title = "Boxplot of Survey Duration by Hypertension and Diabetes",
x = "Hypertension",
y = "Survey Duration",
fill = "Diabetes",
shape = "Blood Glucose"
) +
scale_shape_manual(values = c(19, 1, 2, 4)) +
theme_minimal()
# Display the plot
print(p)
# Display the plot
print(p)
p
boxplot <- function(data, x, y){
# Create a boxplot with median, Q1, Q3, and colored outliers
p <- ggplot(data, aes(x = x, y = y)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 1) +
geom_point(
data = data %>%
group_by(x) %>%
summarize(Median = median(y), Q1 = quantile(y, 0.25), Q3 = quantile(y, 0.75)),
aes(x = x, y = Median),
color = "blue",
size = 3
) +
geom_point(
data = data %>%
group_by(x) %>%
summarize(Median = median(y), Q1 = quantile(y, 0.25), Q3 = quantile(y, 0.75)),
aes(x = x, y = Q1),
color = "green",
size = 3
) +
geom_point(
data = data %>%
group_by(x) %>%
summarize(Median = median(y), Q1 = quantile(y, 0.25), Q3 = quantile(y, 0.75)),
aes(x = x, y = Q3),
color = "orange",
size = 3
) +
theme_minimal()
}
boxplot <- function(data, x, y){
# Create a boxplot with median, Q1, Q3, and colored outliers
p <- ggplot(data, aes(x = x, y = y)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 1) +
geom_point(
data = data %>%
group_by(x) %>%
summarize(Median = median(y), Q1 = quantile(y, 0.25), Q3 = quantile(y, 0.75)),
aes(x = x, y = Median),
color = "blue",
size = 3
) +
geom_point(
data = data %>%
group_by(x) %>%
summarize(Median = median(y), Q1 = quantile(y, 0.25), Q3 = quantile(y, 0.75)),
aes(x = x, y = Q1),
color = "green",
size = 3
) +
geom_point(
data = data %>%
group_by(x) %>%
summarize(Median = median(y), Q1 = quantile(y, 0.25), Q3 = quantile(y, 0.75)),
aes(x = x, y = Q3),
color = "orange",
size = 3
) +
theme_minimal()
return(p)
}
boxplot_gen <- function(data, x, y){
# Create a boxplot with median, Q1, Q3, and colored outliers
p <- ggplot(data, aes(x = x, y = y)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 1) +
geom_point(
data = data %>%
group_by(x) %>%
summarize(Median = median(y), Q1 = quantile(y, 0.25), Q3 = quantile(y, 0.75)),
aes(x = x, y = Median),
color = "blue",
size = 3
) +
geom_point(
data = data %>%
group_by(x) %>%
summarize(Median = median(y), Q1 = quantile(y, 0.25), Q3 = quantile(y, 0.75)),
aes(x = x, y = Q1),
color = "green",
size = 3
) +
geom_point(
data = data %>%
group_by(x) %>%
summarize(Median = median(y), Q1 = quantile(y, 0.25), Q3 = quantile(y, 0.75)),
aes(x = x, y = Q3),
color = "orange",
size = 3
) +
theme_minimal()
return(p)
}
df %>%
filter(svy_duration  < 300 & ck_cal_eligible == 1) %>%
boxplot_gen(., ck_blood_glucose_yes, svy_duration)
df %>%
filter(svy_duration  < 300 & ck_cal_eligible == 1) %>%
boxplot_gen(df, ck_blood_glucose_yes, svy_duration)
df %>%
filter(svy_duration  < 300 & ck_cal_eligible == 1) %>%
boxplot_gen(df, df$ck_blood_glucose_yes, df$svy_duration)
pacman::p_load(
tidyverse, lubridate, janitor, ggplot2
)
# Create a generic function for labeled box plots
boxplot_gen <- function(data, x_var, y_var, category_var) {
p <- ggplot(data, aes_string(x = x_var, y = y_var)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 1) +
geom_point(
data = data %>%
group_by({{category_var}}) %>%
summarize(Median = median({{y_var}}), Q1 = quantile({{y_var}}, 0.25), Q3 = quantile({{y_var}}, 0.75)),
aes_string(x = x_var, y = "Median"),
color = "blue",
size = 3
) +
geom_point(
data = data %>%
group_by({{category_var}}) %>%
summarize(Median = median({{y_var}}), Q1 = quantile({{y_var}}, 0.25), Q3 = quantile({{y_var}}, 0.75)),
aes_string(x = x_var, y = "Q1"),
color = "green",
size = 3
) +
geom_point(
data = data %>%
group_by({{category_var}}) %>%
summarize(Median = median({{y_var}}), Q1 = quantile({{y_var}}, 0.25), Q3 = quantile({{y_var}}, 0.75)),
aes_string(x = x_var, y = "Q3"),
color = "orange",
size = 3
) +
labs(
title = paste("Boxplot of", y_var, "by", x_var),
x = x_var,
y = y_var,
color = "Legend"
) +
theme_minimal()
return(p)
}
# Example usage:
# data <- your_data_frame
boxplot_gen(df, "ck_blood_glucose_yes", "svy_duration", "ck_blood_glucose_yes")
# Create a generic function for labeled box plots
boxplot_gen <- function(data, x_var, y_var, category_var) {
p <- ggplot(data, aes(x = x_var, y = y_var)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 1) +
geom_point(
data = data %>%
group_by({{category_var}}) %>%
summarize(Median = median({{y_var}}), Q1 = quantile({{y_var}}, 0.25), Q3 = quantile({{y_var}}, 0.75)),
aes_string(x = x_var, y = "Median"),
color = "blue",
size = 3
) +
geom_point(
data = data %>%
group_by({{category_var}}) %>%
summarize(Median = median({{y_var}}), Q1 = quantile({{y_var}}, 0.25), Q3 = quantile({{y_var}}, 0.75)),
aes_string(x = x_var, y = "Q1"),
color = "green",
size = 3
) +
geom_point(
data = data %>%
group_by({{category_var}}) %>%
summarize(Median = median({{y_var}}), Q1 = quantile({{y_var}}, 0.25), Q3 = quantile({{y_var}}, 0.75)),
aes_string(x = x_var, y = "Q3"),
color = "orange",
size = 3
) +
labs(
title = paste("Boxplot of", y_var, "by", x_var),
x = x_var,
y = y_var,
color = "Legend"
) +
theme_minimal()
return(p)
}
# Example usage:
# data <- your_data_frame
boxplot_gen(df, "ck_blood_glucose_yes", "svy_duration", "ck_blood_glucose_yes")
table(df$ck_blood_glucose_yes)
# Create a generic function for labeled box plots
# Create a generic function for labeled box plots
boxplot_gen <- function(data, x_var, y_var, category_var) {
p <- ggplot(data, aes_string(x = x_var, y = y_var)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 1) +
geom_point(
data = data %>%
group_by({{category_var}}) %>%
summarize(Median = median({{y_var}}, na.rm = TRUE), Q1 = quantile({{y_var}}, 0.25, na.rm = TRUE), Q3 = quantile({{y_var}}, 0.75, na.rm = TRUE)),
aes_string(x = x_var, y = "Median"),
color = "blue",
size = 3
) +
geom_point(
data = data %>%
group_by({{category_var}}) %>%
summarize(Median = median({{y_var}}, na.rm = TRUE), Q1 = quantile({{y_var}}, 0.25, na.rm = TRUE), Q3 = quantile({{y_var}}, 0.75, na.rm = TRUE)),
aes_string(x = x_var, y = "Q1"),
color = "green",
size = 3
) +
geom_point(
data = data %>%
group_by({{category_var}}) %>%
summarize(Median = median({{y_var}}, na.rm = TRUE), Q1 = quantile({{y_var}}, 0.25, na.rm = TRUE), Q3 = quantile({{y_var}}, 0.75, na.rm = TRUE)),
aes_string(x = x_var, y = "Q3"),
color = "orange",
size = 3
) +
labs(
title = paste("Boxplot of", y_var, "by", x_var),
x = x_var,
y = y_var,
color = "Legend"
) +
theme_minimal()
return(p)
}
# Example usage:
# data <- your_data_frame
boxplot_gen(df, "ck_blood_glucose_yes", "svy_duration", "ck_blood_glucose_yes")
# duration by case type
df %>%
filter(svy_duration  < 300 & ck_cal_eligible == 1) %>%
ggplot(aes(mhist_drug_noall, svy_duration)) +
geom_boxplot()
# duration by case type
df %>%
filter(svy_duration  < 300 & ck_cal_eligible == 1) %>%
ggplot(aes(mhist_drug_noall, svy_duration)) +
geom_boxplot() +
labs(x = "Murgang", y = "Nutzen / Konsten \n Verhälhniss") +
stat_summary(geom = "text", fun.y = quantile,
aes(label=sprintf("%1.1f", ..y..)),
position=position_nudge(x=0.4), size=3.5)
# duration by case type
df %>%
filter(svy_duration  < 300 & ck_cal_eligible == 1) %>%
mutat(mhist_drug_noall = ifelse(mhist_drug_noall == 1, "No Medication Questions", "At least one type medication question")) %>%
ggplot(aes(mhist_drug_noall, svy_duration)) +
geom_boxplot() +
labs(x = "No Medication History Question", y = "Survey Duration") +
stat_summary(geom = "text", fun.y = quantile,
aes(label=sprintf("%1.1f", ..y..)),
position=position_nudge(x=0.4), size=3.5)
# duration by case type
df %>%
filter(svy_duration  < 300 & ck_cal_eligible == 1) %>%
mutate(mhist_drug_noall = ifelse(mhist_drug_noall == 1, "No Medication Questions", "At least one type medication question")) %>%
ggplot(aes(mhist_drug_noall, svy_duration, fill = mhist_drug_noall)) +
geom_boxplot() +
labs(x = "No Medication History Question", y = "Survey Duration") +
stat_summary(geom = "text", fun.y = quantile,
aes(label=sprintf("%1.1f", ..y..)),
position=position_nudge(x=0.4), size=3.5)
# duration by case type
df %>%
filter(svy_duration  < 300 & ck_cal_eligible == 1) %>%
mutate(mhist_drug_noall = ifelse(mhist_drug_noall == 1, "No Medication Questions", "At least one type medication question")) %>%
ggplot(aes(mhist_drug_noall, svy_duration, fill = mhist_drug_noall)) +
geom_boxplot() +
labs(x = "No Medication History Question", y = "Survey Duration") +
stat_summary(geom = "text", fun.y = quantile,
aes(label=sprintf("%1.1f", ..y..)),
position=position_nudge(x=0.4), size=3.5) +
theme(legend.position="none")
df %>%
filter(svy_duration  < 300 & ck_cal_eligible == 1) %>%
ggplot(aes(mhist_drug_nocount, svy_duration, fill = factor(mhist_drug_nocount))) +
geom_boxplot() +
labs(x = "No Medication History Question", y = "Survey Duration") +
stat_summary(geom = "text", fun.y = quantile,
aes(label=sprintf("%1.1f", ..y..)),
position=position_nudge(x=0.4), size=3.5) +
theme(legend.position="none")
df %>%
filter(svy_duration  < 300 & ck_cal_eligible == 1) %>%
ggplot(aes(mhist_drug_nocount, svy_duration, fill = factor(mhist_drug_nocount))) +
geom_boxplot() +
labs(x = "No Medication History Question", y = "Survey Duration") +
stat_summary(geom = "text", fun.y = quantile,
aes(label=sprintf("%1.1f", ..y..)),
position=position_nudge(x=0.4), size=3.5)
df %>%
filter(svy_duration  < 300 & ck_cal_eligible == 1) %>%
ggplot(aes(mhist_drug_nocount, svy_duration, fill = factor(mhist_drug_nocount))) +
geom_boxplot() +
labs(x = "Number of No Medication History Question", y = "Survey Duration") +
stat_summary(geom = "text", fun.y = quantile,
aes(label=sprintf("%1.1f", ..y..)),
position=position_nudge(x=0.4), size=3.5) +
theme(legend.position="none")
df %>%
filter(svy_duration  < 300 & ck_cal_eligible == 1) %>%
ggplot(aes(mhist_drug_nocount, svy_duration, fill = factor(mhist_drug_nocount))) +
geom_boxplot() +
labs(x = "Number of medication history question not administered", y = "Survey Duration") +
stat_summary(geom = "text", fun.y = quantile,
aes(label=sprintf("%1.1f", ..y..)),
position=position_nudge(x=0.4), size=3.5) +
theme(legend.position="none")
